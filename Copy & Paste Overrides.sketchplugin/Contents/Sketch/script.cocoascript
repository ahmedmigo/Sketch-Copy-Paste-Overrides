var sketch = require('sketch/dom');
var Settings = require('sketch/settings');
var document = sketch.Document.getSelectedDocument();
var selection = document.selectedLayers.layers[0];
var SymbolInstance = require('sketch/dom').SymbolInstance;
var symbolId = document.selectedLayers.layers[0]['id'];
var savedOverrides = {};

var copyOverrides = function(context){
	Settings.setSettingForKey('symbolId', symbolId);
}

var pasteOverrides = function(context){
	var rId = Settings.settingForKey('symbolId');
	getOverrides(context, rId);
	setOverrides(context);
}

var getOverrides = function(context, rId) {

	var rLayer = document.getLayerWithID(rId);
	var symbolOverrides = rLayer.overrides;
	log(symbolOverrides);
	var isNested = false;

	for (i = 0; i < symbolOverrides.length; i++) {
		var layerProperty = symbolOverrides[i]['property'];
		var layerValue = symbolOverrides[i]['value'];
		var layerId = symbolOverrides[i]['path'];
		var rawId;

		if(isNested == true){
				rawId = symbolOverrides[i]['path'];
				log('rawId: ' + rawId);
				rawId = rawId.split('/');
				layerId = rawId[1];
				log('layerId: ' + layerId);
				isNested == false;
		}

		if(layerProperty == 'symbolID'){ // Nested Symbols
			isNested = true;
		}

		if(layerProperty == 'image'){ // Image Overrides
			var layerValue = layerValue.nsimage;
			var layerName = context.document.documentData().layerWithID(layerId).name();
			savedOverrides[layerName] = layerValue;
		}else{
			log(layerId);
			var layerName = context.document.documentData().layerWithID(layerId).name();
			savedOverrides[layerName] = layerValue;
		}
	}

	log(savedOverrides);

};

var setOverrides = function(context) {

	var overrideOptions = [];

	var symbolOverrides = selection.overrides;
	var isNested = false;

	 for (i = 0; i < symbolOverrides.length; i++) {
	   var layerId = symbolOverrides[i]['path'];
		 var rawId;
		 var layerProperty = symbolOverrides[i]['property'];

 		if(isNested == true){
 				rawId = symbolOverrides[i]['path'];
 				//log('rawId: ' + rawId);
 				rawId = rawId.split('/');
 				layerId = rawId[1];
 				//log('layerId: ' + layerId)
 				isNested == false;
 		}

 		if(layerProperty == 'symbolID'){ // Nested Symbols
 			isNested = true;
 		}

		if(layerProperty !== 'symbolID'){
			//log('layerId: ' + layerId);
			var layerName = context.document.documentData().layerWithID(layerId).name();
			overrideOptions.push(layerName);
 		}

 	}

	log('overrides l93: ' + overrideOptions);
	log(symbolOverrides);

	isNested = false;

	for (i = 0; i < overrideOptions.length; i++) {
		var rawId;
		var key = overrideOptions[i];
  	var newOverrideValue = savedOverrides[key];
		var layerProperty = symbolOverrides[i]['property'];
		log('property l98: ' + key + ' = ' + symbolOverrides[i]['value']);

		if(layerProperty == 'symbolID'){ // Nested Symbols
			isNested = true;
		}

		if(layerProperty == 'image'){ // Images
 	    var layerId = symbolOverrides[i]['path'];
			var imageLayer = document.getLayerWithID(layerId);
			imageLayer.sketchObject.style().fills().firstObject().setImage(MSImageData.alloc().initWithImage(newOverrideValue));
		}else if(isNested == true){
		 				rawId = symbolOverrides[i]['path'];
		 				rawId = rawId.split('/');
		 				layerId = rawId[1];
		 				isNested == false;
		}else if(newOverrideValue !== undefined || layerProperty !== 'symbolID'){ // Ignore additional layers we do not have overrids for
			//log(symbolOverrides[i]);
			//log(symbolOverrides[i].value + ' = ' + newOverrideValue);
			symbolOverrides[i]['value'] = newOverrideValue;
		}

	}

};
