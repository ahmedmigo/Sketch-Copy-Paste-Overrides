var sketch = require('sketch/dom');
var Settings = require('sketch/settings');
var document = sketch.Document.getSelectedDocument();
var selection = document.selectedLayers.layers[0];
var SymbolInstance = require('sketch/dom').SymbolInstance;
var symbolId = document.selectedLayers.layers[0]['id'];
var savedOverrides = {};

var copyOverrides = function(context){
	Settings.setSettingForKey('symbolId', symbolId);
}

var pasteOverrides = function(context){
	var rId = Settings.settingForKey('symbolId');
	getOverrides(context, rId);
	setOverrides(context);
}

var getOverrides = function(context, rId) {

	var rLayer = document.getLayerWithID(rId);
	var symbolOverrides = rLayer.overrides;

	for (i = 0; i < symbolOverrides.length; i++) {
		var rawId = symbolOverrides[i]['id'];
		rawId = rawId.split("_");
		var cleanId = rawId[0];
		var layerName = context.document.documentData().layerWithID(cleanId).name();
		var layerProperty = symbolOverrides[i]['property'];
		var layerValue = symbolOverrides[i]['value'];
		if(layerProperty == 'image'){
			var layerValue = layerValue.nsimage;
		}
		savedOverrides[layerName] = layerValue;
	}

};

var setOverrides = function(context) {

	var overrideOptions = [];

	var symbolOverrides = selection.overrides;

	 for (i = 0; i < symbolOverrides.length; i++) {
	   var rawId = symbolOverrides[i]['id'];
	   rawId = rawId.split("_");
	   var cleanId = rawId[0];
	   var layerName = context.document.documentData().layerWithID(cleanId).name();
	   overrideOptions.push(layerName);
 	}

	for (i = 0; i < overrideOptions.length; i++) {
		var key = overrideOptions[i];
  	var newOverrideValue = savedOverrides[key];
		var layerProperty = symbolOverrides[i]['property'];
		if(layerProperty == 'image'){
			var rawId = symbolOverrides[i]['id'];
 	    rawId = rawId.split("_");
 	    var cleanId = rawId[0];
			var imageLayer = document.getLayerWithID(cleanId);
			imageLayer.sketchObject.style().fills().firstObject().setImage(MSImageData.alloc().initWithImage(newOverrideValue));
		}else if(newOverrideValue !== undefined){
			symbolOverrides[i].value = newOverrideValue;
		}
	}

};
